<h1>新規投稿</h1>

<!--バリデーション-->
<% if @list.errors.any? %>
  <%= @list.errors.count %>件のエラーが発生しました
  <ul>
    <% @list.errors.full_messages.each do |message| %>
      <li><%= message %></li>
    <% end %>
  </ul>
<% end %>
<!-- form_with部分 -->
<%= form_with model: @list, url: '/lists', method: :post do |f| %>
  <h4>タイトル</h4>
  <%= f.text_field :title %>

  <h4>本文</h4>
  <%= f.text_area :body %>

  <h4>画像</h4>
  <%= f.file_field :image, accept: "image/*" %>

  <%= f.submit '投稿' %>
<% end %>

<!--!マークはコメントアウトなので無視する)-->

<!--表題9-->
<!--投稿機能を追加するために記述を追加する2-->
<!--この時点で記述されているものをすべて削除し、-->
<!--form_withヘルパー(セキュリティ対策済みのHTML)でフォームを作成する-->

<!--form_withの基本形-->
<!--<!%= form_with do |f| %>-->
<!--<!% end %>-->

<!--<!%で始まるタグは、Rubyで使われるタグです。-->
<!--<!% %>では、タグ内の結果がHTMLに変換されずに処理されます。-->
<!--<!%= %>では、タグ内の結果がHTMLに変換されます-->
<!--「|f|」の部分はブロック変数と言い、特定の範囲内で使える変数のことで、-->
<!--今回だとform_withと同じdoからendまでの範囲で使うことができる変数-->

<!--基本形からListモデルと連携したform_with-->
<!--<!%= form_with model: List.new do |f| %>-->
<!--アプリケーション作成後に設定したモデルのmodel: Listの後に-->
<!--現在、要素を追加中のnewを付け加えたmodel: List.newを追加する-->
<!--<!% end %>-->

<!--modelオプションでList.newの設定だけで自動的CreateアクションのURLへ送信する-->
<!--(routes.rb内のpost 'lists' => 'lists#create'に送信する）-->

<!--form_withのベースが仕上がったのでform_withの範囲の中に、-->
<!--テキストフィールドや送信ボタンなどの部品を追加していきます。-->
<!--単一行のテキストフィールド	タイトル	text_field-->
<!--複数行のテキストフィールド	本文	text_area-->
<!--送信ボタン	「投稿」ボタン	submit-->
<!--これらのモデルオブジェクトを作成するために、-->
<!--form_withヘルパーの部分で紹介したブロック変数「f」を使用します-->
<!--また末尾(プロパティ)では表題2で設定したListのカラムをつけます-->
<!--      t.string  → :title ←コレ #stringとは文字列のこと-->
<!--      t.string  → :body ←コレ #t.データ型 :カラム名(カラムとは列のこと)-->
<!--これによりモデルListの機能が使えます-->

<!--<!%= form_with model: List.new do |f| %>-->
<!--  　　　       　<!%= f.text_field :title %>-->
<!--Listのブロック変数↑　 ↑          　　↑Listのカラム-->
<!--                      ↑モデルオブジェクト-->
<!--<!% end %>-->

<!--上記のモデルオブジェクトにタイトルをつけて作成すると-->
<!--<!%= form_with model: List.new do |f| %>-->
<!--  <h4>タイトル</h4>-->
<!--  <!%= f.text_field :title %>-->

<!--  <h4>本文</h4>-->
<!--  <!%= f.text_area :body %>-->

<!--  <!%= f.submit '投稿' %>-->
<!--<!% end %>-->

<!--順序でいうと-->
<!--1⃣h1タイトル作成-->
<!--  <h1>新規投稿</h1>-->
<!--2⃣form_withのベースを作成-->
<!--  モデルのListにこのファイルのnewを合わせたmodel: List.newを追加する-->
<!--  <!%= form_with model: List.new do |f| %>-->
<!--  <!% end %>-->
<!--3⃣h4タイトルをform_withのプログラム内に作成する-->
<!--  <h4>タイトル</h4>-->
<!--4⃣form_withで必要な要素を追加していく-->
<!--  今回は、モデルオブジェクトをtext_field、プロパティをtitle、-->
<!--  h4で指定したタイトルの下に追加する-->
<!--  <h4>タイトル</h4>-->
<!--  <!%= f.text_field :title %>-->
<!--5⃣次に3⃣と4⃣と同じ手順を用いて、h4は本文、モデルオブジェクトをtext_area-->
<!--  プロパティをbodyで追加する-->
<!--  <h4>本文</h4>-->
<!--  <!%= f.text_area :body %>-->
<!--6⃣最後にタイトルの本文を用意せず、4⃣の手順でモデルオブジェクトをsubmit-->
<!--  プロパティ部分にカラムではなく、文字列の'投稿'を設定して追加する-->
<!--  <!%= f.submit '投稿' %>-->

<!--form_withの設定を終えたあと-->
<!--app/controllers/lists_controller.rbを開く-->

<!--表題11-->
<!--投稿機能を追加するために記述を追加する4-->
<!--コントローラーでインスタンス変数を定義したあと、-->
<!--コントローラーとViewでデータの受け渡しができないList.newを削除して-->
<!--コントローラーとViewでデータの受け渡しができるインスタンス変数の@listを追加する-->
<!--<!%= form_with model: List.new do |f| %>-->
<!--↓-->
<!--<!%= form_with model: @list do |f| %>-->
<!--変更後、サーバーを起動して変化がないことを確認する。-->
<!--確認後はapp/controllers/lists_controller.rbに戻る。-->

<!--表題13-->
<!--投稿機能を追加するために記述を追加する6-->
<!--ここまでで作成したform_withには、-->
<!--List.newとモデルと連携させることにより、送信先のURLを判別するものでした。-->
<!--しかしこれは省略形を使用したものであり慣れる前からこの省略形で扱うと、-->
<!--意図しない問題の原因にもなりますので、厳格な書き方を行います-->
<!--url-->
<!--どのURLへフォームの情報を送信するか(今回は'/lists')-->
<!-- method-->
<!--HTTPメソッドを指定(:postを指定する。POST（POSTメソッド）とは、-->
<!--HTTP通信でWebブラウザ等のクライアントからWebサーバへと送られる、-->
<!--HTTPリクエストの一種です。-->
<!--基本的に、Webサーバに情報を送り出す（POST）するために使用されます。)-->
<!--上記の二つを入れたコードに変更していきます-->
<!--<!%= form_with model: @list do |f| %>-->
<!--↓-->
<!--<!%= form_with model: @list, url: '/lists', method: :post do |f| %>-->
<!--コードを変更したらサーバーを起動して変化がないことを確認します。-->
<!--確認後app/controllers/lists_controller.rbに移動する-->

<!--表題33-->
<!--画像投稿機能を作ろう2-->
<!-- <h4>画像</h4>-->
<!--  <!%= f.file_field :image, accept: "image/*" %>-->
<!--'file_field'というフィールドを追加します-->
<!--文字通り、ファイルの投稿をするためのフィールドなので、-->
<!--画像ファイル以外の全てのファイル(音声ファイルや動画ファイルなど)も投稿できます。-->
<!--今回は、accept: "image/*"を使い、画像ファイルしか投稿できないようにしています。-->
<!--app/controllers/lists_controller.rbへ移動します-->

<!--表題46-->
<!--バリデーション設定をしよう3-->
<!--エラーになったときに画面上ではエラーの内容が表示されません。-->
<!--エラーの内容が確認できるようにするために以下を記述します-->
<!-- <!% if @list.errors.any? %>-->
<!--  <!%= @list.errors.count %>件のエラーが発生しました-->
<!--  <ul>-->
<!--    <!% @list.errors.full_messages.each do |message| %>-->
<!--      <li><!%= message %></li>-->
<!--    <!% end %>-->
<!--  </ul>-->
<!-- <!% end %>-->
<!--errorsは、モデルにバリデーションをかけたときに、発生したエラーの内容を確認できるメソッドです。-->
<!--any? と組み合わせることで、エラーが発生しているかどうかを判定できます。-->
<!--errors.count %>件はエラーの件数です-->
<!--full_messagesと組み合わせることで、エラーの内容を出力できます。 -->
<!--エラー文は配列で保存されているため、eachを使います。-->
<!--eachメソッドではブロック変数(message)を設定し、本文の引数をローカル変数(message)-->
<!--として記述することが多い-->
<!--HTMLタグ「ul」「ol」「li」での箇条書きで使用するものです-->
<!--サーバーを起動させてapp/views/lists/new.html.erb(～amazonaws.com/lists)で-->
<!--エラーメッセージを出力しているコードを確認しましょう-->
<!--app/controllers/lists_controller.rbに移動します-->