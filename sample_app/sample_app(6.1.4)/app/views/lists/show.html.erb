<!--タイトルや本文、画像表示などを一つ表示させて、編集と削除ボタンを設定する場所-->

<div>
  <%= flash[:notice] %>
<div>

<h2>タイトル</h2>
<p><%= @list.title %></p>

<h2>本文</h2>
<p><%= @list.body %></p>

<h2>画像</h2>
<% if @list.image.attached? %>
  <%= image_tag @list.image, size: "300x300" %>
<% else %>
  <%= image_tag 'no_image', size: "300x300" %>
<% end %>

<%= link_to "編集", edit_list_path(@list.id) %>
<%= link_to "削除", list_path(@list.id), method: :delete, "data-confirm" => "本当に削除しますか？" %>

<!--!マークはコメントアウトなので無視する)-->

<!--表題20-->
<!--詳細画面を作ろう3-->
<!--まずは記述されているコードを削除します。-->
<!--次に@listにListモデルのカラムを指定した-->
<!--<h2>タイトル</h2>-->
<!--<p><!%= @list.title %></p>-->
<!--<h2>本文</h2>-->
<!--<p><!%= @list.body %></p>-->
<!--を入力する-->
<!--@listにはURLによって異なるレコードが入るはずです-->
<!--サーバを起動してlists/1にアクセスします。-->
<!--確認完了後app/views/lists/index.html.erbに移動します-->

<!--表題31-->
<!--詳細画面に編集画面へのリンクを追加する-->
<!--<!%= link_to "編集", edit_list_path(@list.id) %>-->
<!--上記を追加する-->
<!--サーバを起動して-->
<!--https://...amazonaws.com/lists/1へアクセスし、-->
<!--リンクが機能しているかどうかを確認する。-->
<!--次の項は画像追加なのでrails active_storage:installで-->
<!--アプリをダウンロードする-->
<!--その後　rails db:migrate　のコマンドを実行する-->
<!--実行後はapp/models/list.rbへ移動-->

<!--表題36-->
<!--画像投稿機能を作ろう5-->
 <!--<h2>画像</h2>-->
 <!--% if @list.image.attached? %>-->
 <!-- <!%= image_tag @list.image, size: "300x300" %>-->
 <!--<!% else %>-->
 <!-- <!%= image_tag 'no_image', size: "300x300" %>-->
 <!--<!% end %>-->
 <!--先ほどindexに記載した内容と同様なものを記載します。-->
 <!--その後サンプルの画像をダウンロードして-->
 <!--サーバーを起動してhttps://...amazonaws.com/lists/newにアクセスします。-->
 <!--アクセス後はタイトル、本文を入力して、画像をファイル選択から投稿します-->
 <!--その後、URLがlists/値になっているのを確認する-->

 <!--has_one_attached :imageをhas_one_attached :iconに変更したい場合-->
 <!--画像を投稿するフォームの<!%= f.file_field :image %>を-->
 <!--<!%= f.file_field :icon %>に変更します-->
 <!--その後.image.attached?が記述されているviewファイルのimageをiconに-->
 <!--変更することでhas_one_attached :iconにすることができる。-->
 <!--そのほかの変更はしなくても画像表示することができます。-->
 <!--削除機能を追加するのでconfig/routes.rbに移動します。-->

<!--表題39-->
<!--削除機能を作ろう3-->
<!--destroyアクションへのリンクを、show.html.erbファイルに作成しますが-->
<!--link_toのmethodオプションについて先に説明します。-->
<!--今まで、link_toを作成して画面の遷移を行なってきていましたが-->
<!--それらは全てHTTPメソッドがGETになっています。-->
<!--そのため、このままでは以下のことができません。-->
<!--update <= HTTPメソッドがPATCHのため-->
<!--destroy <= HTTPメソッドがDELETEのため-->
<!--create <= HTTPメソッドがPOSTのため-->
<!--これらのアクションを実行するためにはURLだけではなく-->
<!--HTTPメソッドも指定しなければなりません。-->
<!--link_toのmethodオプションは、URLに対してHTTPメソッドを設定する為のオプションです-->
<!--PATCHメソッドを指定する為には以下のように記述する(methodオプション以外は簡略化)-->
<!--　<!%= link_to '表示するテキスト', URL, method: :patch %>-->
<!--ルーティングの中からHTTPメソッドがPATCHでURLが同じという条件で-->
<!--実行するべきアクションを探して実行してくれます-->
<!--destroyアクションのHTTPメソッドは、DELETEを指定します。-->
<!--誤って「削除」をクリックしてしまった場合に備えて、-->
<!--data-confirmを用いて削除確認ダイアログも表示されるように設定します。-->
<!--<!%= link_to "削除", destroy_list_path(@list.id), method: :delete, "data-confirm" => "本当に削除しますか？" %>-->
<!--削除は文字列　destroy_list_path(@list.id)はリダイレクト要素とlink_toの指定範囲の要素、-->
<!--本来ローカル変数の引数でいいが、アクセス前とリダイレクト先がインスタンス要素で構成しているので、-->
<!--destroy_list_path(@list.id)の引数もインスタンス変数で行う。-->
<!--method: deleteはdestroy_list_path(@list.id)内のdeleteを行うというアクションを実行させる要素です。-->
<!--"data-confirm" => "本当に削除しますか？"という確認ダイアログを表示させるものです-->
<!--サーバーを起動してhttps://...amazonaws.com/lists/1で削除が使用できる確認する-->

<!--表題40-->
<!--CRUD処理を学ぶ1-->
<!--ここでCRUD処理について学びます-->
<!--ここまでの学習で、ウェブアプリケーションの基本であるCRUD（クラッド）機能を実装できるようになりました。-->
<!--CRUDはデータベースに対して行う基本的な処理で、以下の4つを指します。-->
<!--create（作成）-->
<!--例：list.save-->
<!--read（読み取り）-->
<!--例：List.all, List.find(params[:id])-->
<!--update（更新）-->
<!--例：list.update(list_params)-->
<!--destroy（削除）-->
<!--例：list.destroy-->
<!--それぞれの頭文字をとってCRUDと言います。-->
<!--Railsでは保存、取得、更新、削除のことを指します。-->
<!--ここで一度config/routes.rbへ移動します-->

<!--# 表題42-->
<!--# CRUD処理を学ぶ3-->
<!--ルーティングの設定を resources :listsに変更したので、参照すべきルーティングパスが異なっています-->
<!--rails routesで確認するとdestroyはlistのパスに振り分けられていることがわかるので、変更を記述します-->
<!--<!%= link_to "削除", destroy_list_path(@list.id), method: :delete, "data-confirm" => "本当に削除しますか？" %>-->
<!--↓-->
<!--<!%= link_to "削除", list_path(@list.id), method: :delete, "data-confirm" => "本当に削除しますか？" %>-->
<!--これにより削除ボタンへのアクセスが出来、削除機能を使用できます。-->
<!--ここで、編集機能を見ていきます。-->
<!--編集ボタンは削除ボタンと同じでこの画面に表示されますが、-->
<!--削除ボタンは-->
<!--このshowのviewファイルで表示する/lists/値のページにある削除ボタンを押す-->
<!--↓-->
<!--コンピュータ内部で削除が機能する(削除確認のダイアログが設定されているため、それは表示される)-->
<!--↓-->
<!--indexのviewファイルで表示される/listsの一覧画面にリダイレクトされる-->
<!--という手順のため、showのviewファイル内のルーティングパスを変更する必要がありました。-->
<!--しかし編集ボタンは-->
<!--このshowのviewファイルで表示する/lists/値のページにある編集ボタンを押す-->
<!--↓-->
<!--editのviewファイルで表示する/lists/値/editに遷移する-->
<!--↓-->
<!--ここでタイトル、本文を変更して編集機能を使用する-->
<!--↓-->
<!--showのviewファイルで表示する/lists/値のページにリダイレクトされる-->
<!--という手順で動作します。-->
<!--ルーティングの設定を resources :listsに変更したによりupdateのパスも変化しているので-->
<!--update_list PATCH  /lists/:id(.:format)  lists#update-->
<!--↓-->
<!--list(以下すべてはlistパス) GET    /lists/:id(.:format)  lists#show-->
<!--                           PATCH  /lists/:id(.:format)  lists#update-->
<!--                           PUT    /lists/:id(.:format)  lists#update-->
<!--実際に動作をするeditのviewファイルのルーティングパスを変更する必要があります-->
<!--app/views/lists/edit.html.erbに移動します-->

<!--表題56-->
<!--フラッシュメッセージを実装してみよう2-->
<!--フラッシュメッセージをページのどこに表示させるかは、viewファイル内に記述します。-->
<!--<!%= flash[:notice] %>-->
<!--今まで書いたコードの最上部に以下のコードを追加します-->
<!--<div>-->
<!--  <!%= flash[:notice] %>-->
<!--<div>-->
<!--サーバーを起動して、投降後にメッセージが表示されれば実装完了です-->
<!--ここまでが課題2までのカリキュラムです-->